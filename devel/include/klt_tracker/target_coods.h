// Generated by gencpp from file klt_tracker/target_coods.msg
// DO NOT EDIT!


#ifndef KLT_TRACKER_MESSAGE_TARGET_COODS_H
#define KLT_TRACKER_MESSAGE_TARGET_COODS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace klt_tracker
{
template <class ContainerAllocator>
struct target_coods_
{
  typedef target_coods_<ContainerAllocator> Type;

  target_coods_()
    : xTar(0.0)
    , yTar(0.0)  {
    }
  target_coods_(const ContainerAllocator& _alloc)
    : xTar(0.0)
    , yTar(0.0)  {
  (void)_alloc;
    }



   typedef double _xTar_type;
  _xTar_type xTar;

   typedef double _yTar_type;
  _yTar_type yTar;




  typedef boost::shared_ptr< ::klt_tracker::target_coods_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::klt_tracker::target_coods_<ContainerAllocator> const> ConstPtr;

}; // struct target_coods_

typedef ::klt_tracker::target_coods_<std::allocator<void> > target_coods;

typedef boost::shared_ptr< ::klt_tracker::target_coods > target_coodsPtr;
typedef boost::shared_ptr< ::klt_tracker::target_coods const> target_coodsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::klt_tracker::target_coods_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::klt_tracker::target_coods_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace klt_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'klt_tracker': ['/home/savio/Documents/Ardupilot-Control/src/klt_tracker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::klt_tracker::target_coods_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::klt_tracker::target_coods_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::klt_tracker::target_coods_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::klt_tracker::target_coods_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::klt_tracker::target_coods_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::klt_tracker::target_coods_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::klt_tracker::target_coods_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f304876c8960b3c74eda82366a1bf42";
  }

  static const char* value(const ::klt_tracker::target_coods_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f304876c8960b3cULL;
  static const uint64_t static_value2 = 0x74eda82366a1bf42ULL;
};

template<class ContainerAllocator>
struct DataType< ::klt_tracker::target_coods_<ContainerAllocator> >
{
  static const char* value()
  {
    return "klt_tracker/target_coods";
  }

  static const char* value(const ::klt_tracker::target_coods_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::klt_tracker::target_coods_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xTar\n\
float64 yTar\n\
";
  }

  static const char* value(const ::klt_tracker::target_coods_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::klt_tracker::target_coods_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xTar);
      stream.next(m.yTar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_coods_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::klt_tracker::target_coods_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::klt_tracker::target_coods_<ContainerAllocator>& v)
  {
    s << indent << "xTar: ";
    Printer<double>::stream(s, indent + "  ", v.xTar);
    s << indent << "yTar: ";
    Printer<double>::stream(s, indent + "  ", v.yTar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KLT_TRACKER_MESSAGE_TARGET_COODS_H
